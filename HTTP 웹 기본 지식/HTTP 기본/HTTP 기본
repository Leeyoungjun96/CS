### 모든 것이 HTTP (HTTP 메시지에 모든 것을 전송)

#### 기반 프로토콜
TCP : HTTP/1.1, HTTP/2
UDP : HTTP/3
현재 HTTP/1.1 주로 사용(2, 3은 성능개선 수준이므로 크게 상관은 없음)

#### 클라이언트 서버 구조
Request Response 구조
클라이언트는 서버에 요청을 보내고, 응답을 대기
서버가 요청에 대한 결과를 만들어서 응답
양쪽이 독립적으로 개발을 하여도 영향을 끼치지 않는 장점이 존재

#### Stateful, 무상태 프로토콜(Stateless)
Stateful : 중간에 다른 점원으로 바뀌면 안된다 (항상 같은 서버가 유지되어야 한다)
(중간에 다른 점원으로 바뀔 때 상태 정보를 다른 점원에게 미리 알려줘야 한다)

Stateless: 중간에 다른 점원으로 바뀌어도 된다 (무상태는 응답 서버를 쉽게 바꿀 수 있다 -> 무한한 서버 증설 가능)
(갑자기 고객이 증가해도 점원을 대거 투입할 수 있다 / 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다)

Stateless 한계 : 모든 것을 무상태로 설계 할 수 있는 경우도 있고 없는 경우도 있다.
로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태 유지
상태 유지는 최소한 유지되어야함

#### 비 연결성(connectionless)
HTTP는 기본이 연결을 유지하지 않는 모델
일반적으로 초 단위 이하의 빠른 속도로 응답
1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작음
서버 자원을 매우 효율적으로 사용할 수 있음

한계와 극복 : TCP/IP 연결을 새로 맺어야함 (3 way handshake 시간 추가)
웹브라우저로 사이트를 요청하면 HTML뿐만 아니라 수 많은 자원이 함께 다운로드
지금은 HTTP 지속 연결(Persistent connections)로 문제 해결
HTTP/2, HTTP/3에서 더 많은 최적화

#### HTTP 메시지
####### 요청 메시지 - HTTP 메서드
HTTP 메서드 (GET: 조회)
요청대상
