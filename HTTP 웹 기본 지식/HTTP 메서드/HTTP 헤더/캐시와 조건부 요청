#### 캐시 기본 동작

• 캐시가 없을 때 
    • 첫번째 요청 
        ex) 1M 이미지를 요청하면
            • 1.1M 가정 : http헤더 0.1M, http바디 1.0M 
            • 웹브라우저에서 이미지 랜더링
    • 두번째 요청
        • 다시 1.1M 전송2

    • 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야함.
    • 인터넷 네트워크는 매우 느리고 비싸다
    • 브라우저 로딩 속도가 느리다
    • 느린 사용자 경험

• 캐시 적용
    • 첫번째 요청
        ex) 캐시가 유효한 시간(초)를 http 헤더에 넣어 줄 수 있음
            • 브라우저 캐시라고, 응답결과 캐시를 저장하는 곳에서 시간(초) 동안 보관되어서 필요하면 사용가능
    
    • 두번째 요청
        • 브라우저 캐시에서 캐시 유효 시간 검증을 한뒤 네트워크를 탈 필요없이 캐시에 저장된 데이터를 가져옴

    • 캐시 덕분에 캐시 가능 시간동안 네트워크를 사용하지 않아도 된다
    • 비싼 네트워크 사용량을 줄인다
    • 브라우저 로딩 속도가 매우 빠르다
    • 빠른 사용자 경험

    • 세 번째 요청 - 캐시 시간 초과
        • 다시 캐시를 요청한뒤 서버에서 첫번째와 똑같은 메시지를 내려줌

• 캐시 시간 초과
    • 캐시 유효시간이 초과하면, 서버를 통해 데이터를 다시 조회하고 캐시를 갱신한다.
    • 이때 다시 네트워크 다운로드가 발생한다

    • 캐시 유효시간이 초과해서 서버에 다시 요청하면 다음 두 가지 상황이 나타난다.
        1. 서버에서 기존 데이터를 변경함
        2. 서버에서 기존 데이터를 변경하지 않음

    • 캐시 만료후에도 서버에서 데이터를 변경하지 않음
    • 생각해보면 데이터를 전송하는 대신에 저장해 두었던 캐시를 재사용 할 수 있다
    • 단 클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법 필요

• 검증 헤더 추가 (클라이언트의 데이터와 서버의 데이터가 같다는 사실 검증)
    • 첫 번째 요청 (http 헤더에 마지막에 수정된 최종 수정일을 넣어둠)
        • 응답 결과를 캐시에 저장, 데이터 최종 수정일을 기록
    
    • 두 번째 요청
        • 캐시가 가지고 있는 데이터 최종 수정일을 서버에 넘김
        • 서버에서 데이터 최종 수정일을 비교하고 수정이 되지 않았으면
            • http 응답을 만들었을때 304 not modified (변경사항 x)를 보냄
            • http body가 없음
            • 0.1M 전송 (HTTP BODY 전송 X)
            • 응답 결과를 재사용, 헤더 데이터 갱신
            • 클라이언트의 기존 캐시에서 조회

    • 캐시 유효 시간이 초과해도, 서버의 데이터가 갱신되지 않으면
    • 304 Not Modified + 헤더 메타 정보만 응답(바디 X)
    • 클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신
    • 클라이언트는 캐시에 저장되어 있는 데이터 재활용
    • 결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드
    • 매우 실용적인 해결책
    • (브라우저에서 색이 연한 status는 캐시에서 불러온것)

• 검증 헤더와 조건부 요청
    • 검증 헤더
        •  캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
        • Last-Modified, ETag
    • 조건부 요청 헤더
        • 검증 헤더로 조건에 따른 분기
        • If-Modified-Since: Last-Modified 사용
        • If-None-Match: ETag 사용
        • 조건이 만족하면 200 OK
        • 조건이 만족하지 않으면 304 Not Modified
    
    • If-Modified-Since: 이후에 데이터가 수정되었으면?
        • 데이터 미변경 예시
            • 캐시: 2020년 11월 10일 10:00:00 vs 서버: 2020년 11월 10일 10:00:00
            • 304 Not Modified, 헤더 데이터만 전송(BODY 미포함)
            • 전송 용량 0.1M (헤더 0.1M, 바디 1.0M)
        • 데이터 변경 예시
            • 캐시: 2020년 11월 10일 10:00:00 vs 서버: 2020년 11월 10일 11:00:00
            • 200 OK, 모든 데이터 전송(BODY 포함)
            • 전송 용량 1.1M (헤더 0.1M, 바디 1.0M)

    • Last-Modified,, If-Modified-Since 단점
        • 1초 미만(0.X초) 단위로 캐시 조정이 불가능
        • 날짜 기반의 로직 사용
        • 데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우
        • 서버에서 별도의 캐시 로직을 관리하고 싶은 경우
            ex) 스페이스나 주석처럼 크게 영향이 없는 변경에서 캐시를 유지하고 싶은 경우

    • ETag, If-None-Match
        • ETag(Entity Tag)
        • 캐시용 데이터에 임의의 고유한 버전 이름을 달아둠
            ex) ETag: "v1.0", ETag: "a2jiodwjekjl3"
        • 데이터가 변경되면 이 이름을 바꾸어서 변경함(Hash를 다시 생성)
            ex) ETag: "aaaaa" -> ETag: "bbbbb"
        • 진짜 단순하게 ETag만 보내서 같으면 유지, 다르면 다시 받기

    • 헤더에 ETag를 추가하여 두번째 요청시 캐시 시간이 초과되면, 캐시가 가지고 있는 ETag를 포함한 요청

    • ETag, If-None-Match 정리
        • 단순하게 ETag만 서버에 보내서 같으면 유지, 다르면 다시 받기
        • 캐시 제어 로직을 서버에서 완전 관리
        • 클라이언트는 단순히 이 값을 서버에 제공(클라이언트는 캐시 매커니즘을 모름)
            ex) 서버는 베타 오픈 기간인 3일 동안 파일이 변경되어도 ETag를 동일하게 유지
                애플리케이션 배포 주기에 맞추어 ETag: 모두 갱신

