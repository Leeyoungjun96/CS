#### HTTP 헤더
• HTTP 전송에 필요한 모든 부가정보

• 메시지 본문(Message Body)을 통해 표현 데이터 전달
• 메시지 본문 = 페이로드 (Payload)
• 표현은 요청이나 응답에서 전달한 실제 데이터
• 표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공
    • 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
• 참고 : 표현 헤더는 표현 메타데이터와, 페이로드 메시지를 구분해야 하지만, 생략하는 경우가 많음

#### 표현 헤더
• 표현 헤더는 전송, 응답 둘다 사용
• Content-Type : 표현 데이터의 형식
    • 미디어 타입, 문자 인코딩
        EX) text/html; charset=utf-8, application/json, image/png
• Content-Encoding : 표현 데이터의 압축 방식
    • 표현 데이터를 압축하기 위해 사용
    • 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
    • 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제
        EX) gzip, deflate, identity(압축 안한다는 뜻)
• Content-Language : 표현 데이터의 자연 언어
    • 표현 데이터의 자연 언어를 표현
        EX) ko, en, en-US
• Content-Length : 표현 데이터의 길이
    • 바이트 단위
    • Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안됨

#### 협상(Contents-Negotiation) : 클라이언트가 선호하는 요청 표현
• Accept : 클라이언트가 선호하는 미디어 타입 전달
• Accept-Charset : 클라이언트가 선호하는 문자 인코딩
• Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
• Accept-Language : 클라이언트가 선호하는 자연 언어

• 협상 헤더는 요청시에만 사용

• 협상과 우선순위 1 : Quality Values(q)
    • Quality Values(q)값 사용
    • 0~1, 클수록 높은 우선순위
    • 생략하면 1
    • Accept-Language : ko-KR, ko;q=0.9, en-US;q=0.8, en;q=0.7
        • 1. ko-KR;q=1 (q 생략)
        • 2. ko;q=0.9
        • 3. en-US;q=0.8
        • 4. en;q=0.7
• 협상과 우선순위 2 : Quality Values(q) 
    • 구체적인 것이 우선한다
    • Accept: text/*, text/plain, text/plain;format=flowed, */*
        • 1. text/plain;format=flowed
        • 2. text/plain
        • 3. text/*
        • 4. */*
• 협상과 우선순위 3 : Quality Values(q) 
    • 구체적인 것을 기준으로 미디어 타입을 맞춘다
    • Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5
        • 1. text/html;level=1
        • 2. text/html;q=0.7
        • 3. text/plain = text/*
        • 4. */*
        • 5. text/html;level=2

• 단순 전송 (Content-Length) : 콘텐트의 길이를 알 수 있게 해줌, 한번에 요청하고 한번에 받음

• 압축 전송 (Content-Encoding) : 단순 전송을 압축하여 넘겨줌(Content-Encoding 을 보내줘서 어떤걸로 압축했는지 알려줌)

• 분할 전송 (Transfer-Encoding) : 용량이 큰것을 분할하여 오는데로 바로바로 띄울때 사용(Content-Length를 예상하지 못하기 때문에 사용하지 않음)

• 범위 전송 (Range, Content-Range) : 범위를 지정해서 요청(절반 받았을때 다시 처음부터 받기 힘드니 일부러 2개로 나눔)

• From : 유저 에이전트의 이메일 정보

• Referer : 이전 웹 페이지 주소
    • A -> B로 이동하는 경우 B를 요청할 때 Referer: A를 포함해서 요청
    • Referer를 사용해서 유입 경로 분석 가능
    • 요청에서 사용
• User-Agent : 유저 에이전트 애플리케이션 정보
    • 클라이언트의 애플리케이션 정보(웹 브라우저 정보, 등등)
    • 통계 정보
    • 어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능
    • 요청에서 사용
• Server : 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보
    • Server : Apache/2.2.22 (Debian)
    • server : nginx
    • 응답에서 사용
• Date : 메시지가 발생한 날짜와 시간
    • 응답에서 사용

★ Host : 요청한 호스트 정보(도메인)
    • 요청에서 사용
    • 하나의 서버가 여러 도메인을 처리해야 할 때
    • 하나의 IP 주소에 여러 도메인이 적용되어 있을 때

• Location : 페이지 리다이렉션
    • 웹 브라우저는 3XX 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동(리다이렉트)
    • 응답코드 3XX에서 설명
    • 201 (Created) : Location 값은 요청에 의해 생성된 리소스 URI
    • 3XX (Redirection) : Location 값은 요청을 자동으로 리다이렉션하기 위한 대상 리소스를 가르킴

• Allow : 허용 가능한 HTTP 메서드
    • 405 (Method Not Allowed)에서 응답에 포함해야함
    • Allow : Get, Head, Put
lable) : 서비스가 언제까지 불능인지 알려줄 수 있음
    • Retry-After : Fri, 31 Dec 1999 23:59:59 GMT(날짜 표기)
    • Retry-After : 120 (초단위 표기)

• 인증 header
    • Authorization : 클라이언트 인증 정보를 서버에 전달
    • WWW-Authenticate : 리소스 접근시 필요한 인증 방법 정의
        • 401 Unauthorize
• Retry-After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간
    • 503 (Service Unavaid 응답과 함께 사용

• 쿠키
    • Set-Cookie : 서버에서 클라이언트로 쿠키 전달(응답)
    • Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달

    • 쿠키 미사용 : 처음 welcome 페이지 접근
        • Stateless
            • http는 무상태 프로토콜이다 (정보를 건네  주면 연결이 끊어짐)
            • 클라이언트와 서버가 요청과 응답을 주고 받으면 연결이 끊어진다.
            • 클라이언트가 다시 요청하면 서버는 이전 요청을 기억하지 못한다.
            • 클라이언트와 서버는 서로 상태를 유지하지 않는다.

    • 모든 요청에 정보를 넘기는 문제
        • 모든 요청에 사용자 정보가 포함되도록 개발
        • 브라우저를 완전히 종료하고 열면?
        
    • 쿠키 사용 :  로그인 이후 welocome 페이지 접근
        • 모든 요청에 쿠키 정보 자동 포함됨
        • 모든 요청에 보내면 문제가 생김..

    • 사용처
        • 사용자 로그인 세션 관리 (session key를 유저에게 반환해줌)
        • 광고 정보 트래킹
    • 쿠키 정보는 항상 서버에 전송됨
        • 네트워크 트래픽 추가 유발
        • 최소한의 정보만 사용(세션id, 인증 토큰)
        • 서버에 전송하지 않고, 웹브라우저 내부에 데이터를 저장하고 싶으면 웹스토리지(localStorage, sessionStorage 참고)
    • 주의!
        • 보안에 민감한 데이터는 저장하면 안됨(주민번호, 신용카드 번호 등등)

    • 쿠키 - 생명주기 : Expires, max-age
        • Set-Cookie: expires=Sat, 26-Dec-2020 04:39:21 GMT
            • 만료일이 되면 쿠키 삭제
        • Set-Cookie: max-age=3600 (3600초)
            • 0이나 음수를 지정하면 쿠키 삭제
        • 세션 쿠키: 만료 날짜를 생략하면 브라우저 종료시까지만 유지
        • 영속 쿠키: 만료 날짜를 입력하면 해당 날짜까지 유지

    • 쿠키 - 도메인 : Domain
        • 명시: 명시한 문서 기준 도메인 + 서브 도메인 포함
            • domain=example.org를 지정해서 쿠키 생성
                • example.org는 물론이고
                • dev.example.org도 쿠키 접근
        • 생략: 현재 문서 기준 도메인만 적용
            • example.org에서 쿠키를 생성하고 domain 지정을 생략
                • example.org에서만 쿠키 접근
                • dev.example.org는 쿠키 미접근

    • 쿠키 - 경로 : Path
        • 이 경로를 포함한 하위 경로 페이지만 쿠키 접근
        • 일반적으로 path=/ 루트로 지정
        • ex) path=/home지정
            • /home -> 가능
            • /home/level1 -> 가능
            • /home/level1 -> 가능
            • /hello -> 불가능

    • 쿠키 - 보안 : Secure, HttpOnly, SameSite
        • Secure
            • 쿠키는 http, https를 구분하지 않고 전송
            • Secure를 적용하면 https인 경우에만 전송
        • HttpOnly
            • XSS 공격 방지
            • 자바스크립에서 접근 불가(document.cookie)
            • HTTP 전송에만 사용
        • SameSite
            • XSRF 공격 방지
            • 요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송