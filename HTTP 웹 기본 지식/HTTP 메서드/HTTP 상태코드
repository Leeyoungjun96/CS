#### 상태코드 (클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능)
• 2XX (Successful) : 클라이언트의 요청을 성공적으로 처리
    • 200 OK : 요청성공
    • 201 Created : 요청 성공해서 새로운 리소스가 생성됨
    • 202 Accepted : 요청이 접수되었으나 처리가 완료되지 않았음
    • 204 No Content : 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음
        • Save 버튼의 결과로 아무 내용이 없어도 된다
        • Save 버튼을 눌러도 같은 화면을 유지해야 한다
        • 결과 내용이 없어도 204 메시지만으로 성공을 인식할 수 있다
    
• 3XX (Redirection) : 요청을 완료하기 위해 유저 에이전트의 추가조치 필요
    • 리다이렉션 : 웹브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동
        • 영구 리다이렉션
            • 리소스의 URI가 영구적으로 이동
            • 원래의 URL를 사용 X, 검색 엔진 등에서도 변경 인지
            • 301 Moved Permanently : 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음
            • 308 Permanent Redirect : 301과 기능은 같음, 리다이렉트시 요청 메서드와 본문 유지(처음 POST를 보내면 리다이렉트도 POST 유지)
        • 일시적인 리다이렉션 : 일시적인 변경
            • 리소스의 URI가 일시적으로 변경
            • 따라서 검색 엔진 등에서 URL을 변경하면 안됨
            • 302 Found : 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)
            • 307 Temporary Redirect : 302와 기능은 같음, 리다이렉트시 요청 메서드와 본문 유지 (요청 메서드를 변경하면 안된다. MUST NOT)
            • 303 See Other : 302와 기능은 같음, 리다이렉트시 요청 메서드가 GET으로 변경
        • PRG(Post/Redirect/Get) : 일시적인 리다이렉션
            • POST로 주문후에 웹 브라우저를 새로고침하면?
            • 새로고침은 다시 요청
            • 중복 주문이 될 수 있다
            • PRG 이후 리다이렉트
                • URL이 이미 POST -> GET으로 리다이렉트 됨
                • 새로 고침 해도 GET으로 결과 화면만 조회
        • 특수 리다이렉션 : 결과 대신 캐시를 사용
    • 그래서 뭘 써야 하는가?(302, 307, 303)
        • 302 Found -> GET으로 변할 수 있음
        • 307 Temporary Redirect -> 메서드가 변하면 안됨
        • 303 See Other => 메서드가 GET으로 변경
        • 307, 303을 권장하지만 보통은 302를 기본값으로 사용
        • 자동 리다이렉션시 GET으로 변해도 되면 그냥 302를 사용해도 큰 문제없음
    •   기타 리다이렉션
        • 300 Multiple Choices : 잘안씀 
        • 304 Not Modified
            • 캐시를 목적으로 사용
            • 클라이언트에게 리소스가 수정되지 않았음을 알려주며 클라이언트는 로컬PC에 저장된 캐시를 재사용(캐시로 리다이렉트)
            • 304 응답은 응답에 메시지 바디를 포함하면 안된다 (로컬 캐시를 사용해야 하므로)
            • 조건부 GET, HEAD 요청시 사용

• 4XX (Client Error) : 클라이언트 오류 
    • 클라이언트의 요청에 잘못된 문법등으로 서버가 요청을 수행할 수 없음
    • 오류의 원인이 클라이언트에 있음
    • 클라이언트가 이미 잘못된 요청, 데이터를 보내고 있기 때문에, 똑같은 재시도가 실패
    • 400 Bad Request : 클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없음
        • 요청구문, 메시지 등등 오류
        • 클라이언트는 요청 내용을 다시 검토하고, 보내야함 (요청 파라미터가 잘못, API 스펙이 맞지 않을 때)
    • 401 Unauthorized : 클라이언트가 해당 리소스에 대한 인증이 필요함
        • 인증되지 않음
        • 401 오류 발생시 응답에 WWW-Authenticate 헤더와 함께 인증방법을 설명
        • 참고
            • 인증(Authentication) : 본인이 누구인지 확인,(로그인)
            • 인가(Authorization) : 권한부여(ADMIN 권한처럼 특정 리소스에 접근할 수 있는 권한, 인증이 있어야 인가가 있음)
            • 오류 메시지가 Unauthorized 이지만 인증 되지 않음 
    • 403 Forbidden : 서버가 요청을 이해했지만 승인을 거부함
        • 주로 인증 자격은 있지만, 접근 권한이 없을때
    • 404 Not Found : 요청 리소스를 찾을 수 없음
        • 요청 리소스가 서버에 없음
        • 또는 클라이언트가 권한이 부족한 리소스에 접근할 때 해당 리소스를 숨기고 싶을 때

• 5XX (Server Error) : 서버 오류
    • 서버 문제로 오류 발생
    • 서버에 문제가 있기 때문에 재시도 하면 성공할 수도 있음(복구가 되거나 등등)
    • 500 Internal Server Error : 서버 문제로 오류 
        • 서버 내부 문제로 오류 발생
        • 애매하면 500 에러
    • 503 Service Unavailable : 서비스 이용 불가
        • 서버가 일시적인 과부하 또는 예정된 작업으로 잠시 요청을 처리할 수 없음
        • Retry-After 헤더 필드로 얼마뒤에 복구되는지 보낼 수도 있음
        
